buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    id 'com.google.cloud.tools.jib' version '3.3.1'
    id 'jacoco'

}

jacoco {
    toolVersion = '0.8.5'
}

group = 'com.cse'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation 'mysql:mysql-connector-java' //MYSQL
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation 'org.springframework.security:spring-security-test'

    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20220320'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    /*implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'*/

    // zxing
    implementation group: 'com.google.zxing', name: 'javase', version: '3.5.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'

    // File 관련 메서드
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // swagger
    implementation(group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2')
    implementation(group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2') {
        exclude module: 'swagger-annotations' exclude module: 'swagger-models'
    }
    implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.5.21'
    implementation group: 'io.swagger', name: 'swagger-models', version: '1.5.21'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"


    //json type 변환 문제
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')


    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

}

//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//}

//tasks.named('test') {
//    useJUnitPlatform()
//    finalizedBy 'jacocoTestReport'
//}

tasks.test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled false
    }
    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {

        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ["**/*Application*",
                                                "**/*Config*",
                                                "**/*Dto*",
                                                "**/*Jwt*",
                                                "**/*DataFormatProvider*",
                                                "**/*ControllerAdvice*",
                                                "**/*Exception*",
                                                "**/*Condition*",
                                                "**/*Init*",
                                                "**/*BaseTime**",
                                                "**/*Foramtter**",
                                                "**/*ReservationStatusReqConverter**"
                    ] + Qdomains)
                }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

tasks.jacocoTestCoverageVerification {
    jacocoTestCoverageVerification {
        def Qdomains = []
        // 패키지 + 클래스명
        for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }

        violationRules {
            rule {
                enabled = true
                element = 'CLASS'

//                limit {
//                    counter = 'LINE'
//                    value = 'COVEREDRATIO'
////                    minimum = 0.80
//                }
//
//                limit {
//                    counter = 'BRANCH'
//                    value = 'COVEREDRATIO'
//                    minimum = 0.80
//                }

                excludes = ["**/*Application*",
                            "**/*Config*",
                            "**/*Dto*",
                            "**/*Jwt*",
                            "**/*DataFormatProvider*",
                            "**/*ControllerAdvice*",
                            "**/*Exception*",
                            "**/*Condition*",
                            "**/*Init*",
                            "**/*BaseTime**",
                            "**/*Foramtter**",
                            "**/*ReservationStatusReqConverter**"] + Qdomains // 제외할 Qdomains 패턴 추가
            }
        }
    }
}


def querydslDir = "$buildDir/generated/querydsl"

querydsl { //이놈
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets { //이놈
    main.java.srcDir querydslDir
}

configurations { // 이놈
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl { // 이놈
    options.annotationProcessorPath = configurations.querydsl
}